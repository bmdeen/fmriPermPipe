
% Wrapper for FSL's robustfov, to crop an anatomical image to the brain.
% Generates an inverse full2roi xfm, and modifies JSON metadata for output
% image and transforms.
% 
% fpp.fsl.robustFOV(inputPath,outputPath,outputXfm)
%
% Arguments:
% - inputPath: path to input image
% - outputPath (optional): path to output (ROI) image
% - outputXfm (optional): path to output xfm .mat file (ROI to full FOV xfm)
% - outputXfmInverse (optional): path to inverse of output xfm .mat file
%       (full FOV to ROI xfm)

function robustFOV(inputPath,outputPath,outputXfm,outputXfmInverse)

% Define variable defaults
jsonOpts.indent = '\t';     % Use tab indentation for JSON outputs

% Check if filename contains space field
[~,inputName,~] = fpp.util.fileParts(inputPath);
entities = split(inputName,'_');
spaceStr = '';
for e=1:length(entities)
    if contains(entities{e},'space-')
        matchStr = regexp(entities{e},'space-.*','match');
        spaceStr = strrep(matchStr{1},'space-','');
    end
end
if isempty(spaceStr)
    spaceStr = 'FullFOV';
    spaceStrOut = 'RobustFOV';
else
    spaceStrOut = [spaceStr 'RobustFOV'];
end

% Define output names if they don't exist
if ~exist('outputPath','var') || isempty(outputPath)
    outputPath = fpp.bids.changeName(inputPath,'space',spaceStrOut);
end
if ~exist('outputXfm','var') || isempty(outputXfm)
    outputXfm = fpp.bids.changeName(inputPath,{'from','to','mode','space'},...
        {spaceStrOut,spaceStr,'image',[]},'xfm','.mat');
end
if ~exist('outputXfmInverse','var') || isempty(outputXfmInverse)
    outputXfmInverse = fpp.bids.changeName(outputXfm,{'from','to','mode','space'},...
        {spaceStr,spaceStrOut,'image',[]},'xfm','.mat');
end

cmd = ['robustfov -i ' inputPath ' -r ' outputPath ' -m ' outputXfm];

% Run robustfov command
fpp.util.system(cmd);

% Write json output files
inputJsonPath = fpp.bids.jsonPath(inputPath);
if exist(inputJsonPath,'file')
        outputXfmJsonPath = fpp.bids.jsonPath(outputXfm);
        jsonData.Type = 'Affine';
        jsonData.Software = 'robustfov';
        jsonData.Invertible = true;
        jsonData.FromFile = fpp.bids.removeBidsDir(outputPath);
        jsonData.ToFile = fpp.bids.removeBidsDir(inputPath);
        jsonData.CommandLine = cmd;
        jsonData.Description = 'Affine transformation file generated by robustfov.';
        bids.util.jsonencode(outputXfmJsonPath,jsonData,jsonOpts);
        
        outputJsonPath = fpp.bids.jsonPath(outputPath);
        fpp.bids.jsonReconstruct(inputJsonPath,outputJsonPath);
        fpp.bids.jsonChangeValue(outputJsonPath,'SpatialRef',...
            fpp.bids.removeBidsDir(outputPath));
end

% Invert output ROI to full FOV xfm
fpp.fsl.invertXfm(outputXfm,outputXfmInverse);

end