
% Wrapper for FSL's convertwarp, to concatenate multiple affine transforms
% and nonlinear warps. Generates .json metadata for output warp and
% jacobian files.

function concatWarp(outputWarp,referencePath,varargin)

% Define variable defaults
jsonOpts.indent = '\t';     % Use tab indentation for JSON outputs

% Edit variable arguments.  Note: optInputs checks for proper input.
varArgList = {'premat','warp1','midmat','warp2','postmat','jacobian','jmin','jmax',...
    'constrainj','abs','rel','absout','relout'};
indArgIsBoolean = 9:13;
for i=1:length(varArgList)
    argVal = fpp.util.optInputs(varargin,varArgList{i});
    if ~isempty(argVal)
        if ischar(argVal)
            eval([varArgList{i} ' = argVal;']);
        else
            eval([varArgList{i} ' = num2str(argVal);']);
        end
    else
        eval([varArgList{i} ' = [];']);
    end
end

cmd = ['convertwarp --out=' outputWarp ' --ref=' referencePath];

% Add non-boolean additional variables
for i=setdiff(1:length(varArgList),indArgIsBoolean)
    if ~isempty(eval(varArgList{i}))
        eval(['cmd = [cmd '' --' varArgList{i} '=' eval(varArgList{i}) '''];']);
    end
end
% Add boolean additional variables
for i=indArgIsBoolean
    if ~isempty(eval(varArgList{i}))
        eval(['cmd = [cmd '' --' varArgList{i} '''];']);
    end
end

% Run convert_xfm command
fpp.util.system(cmd);

% Write .json file for outputs, json files for relevant inputs exist.
if ~((~isempty(premat) && ~exist(fpp.bids.jsonPath(premat),'file')) || ...
        (~isempty(warp1) && ~exist(fpp.bids.jsonPath(warp1),'file')) || ...
        (~isempty(midmat) && ~exist(fpp.bids.jsonPath(midmat),'file')) || ...
        (~isempty(warp2) && ~exist(fpp.bids.jsonPath(warp2),'file')) || ...
        (~isempty(postmat) && ~exist(fpp.bids.jsonPath(postmat),'file')))
    
    % Output warp
    jsonData.Type = 'Nonlinear';
    jsonData.Software = 'FNIRT';
    jsonData.Invertible = true;
    jsonData.CommandLine = cmd;
    jsonData.Description = 'Warp coefficient file generated by FNIRT.';
    if ~isempty(premat)
        jsonData.FromFile = fpp.bids.getMetadata(premat,'FromFile');
    elseif ~isempty(warp1)
        jsonData.FromFile = fpp.bids.getMetadata(warp1,'FromFile');
    elseif ~isempty(midmat)
        jsonData.FromFile = fpp.bids.getMetadata(midmat,'FromFile');
    elseif ~isempty(warp2)
        jsonData.FromFile = fpp.bids.getMetadata(warp2,'FromFile');
    elseif ~isempty(postmat)
        jsonData.FromFile = fpp.bids.getMetadata(postmat,'FromFile');
    end
    if ~isempty(postmat)
        jsonData.FromFile = fpp.bids.getMetadata(postmat,'ToFile');
    elseif ~isempty(warp2)
        jsonData.FromFile = fpp.bids.getMetadata(warp2,'ToFile');
    elseif ~isempty(midmat)
        jsonData.FromFile = fpp.bids.getMetadata(midmat,'ToFile');
    elseif ~isempty(warp1)
        jsonData.FromFile = fpp.bids.getMetadata(warp1,'ToFile');
    elseif ~isempty(postmat)
        jsonData.FromFile = fpp.bids.getMetadata(postmat,'ToFile');
    end
    bids.util.jsonencode(outputXfmJsonPath,jsonData,jsonOpts);
    
    % Warp jacobian
    if ~isempty(jacobian)
        bids.util.jsonencode(fpp.bids.jsonPath(jacobian),jsonData,jsonOpts);
    end
end

end