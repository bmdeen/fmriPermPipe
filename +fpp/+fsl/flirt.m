
% Wrapper for FSL's flirt, a linear registration tool. Generates .json
% metadata files for output images and transform files.
%
% Doesn't include bbr or distortion correction functionality, because
% fmriPermPipe uses bbregister and topup separately from flirt.

function flirt(inputPath,referencePath,outputXfm,outputPath,varargin)

% Define variable defaults
if ~exist('outputXfm','var')
    outputXfm = [];
end
if ~exist('outputPath','var')
    outputPath = [];
end
jsonOpts.indent = '\t';     % Use tab indentation for JSON outputs

% Edit variable arguments.  Note: optInputs checks for proper input.
varArgList = {'init','datatype','cost','searchcost','interp','sincwindow',...
    'sincwidth','dof','searchrx','searchry','searchrz','applyxfm'};
indArgIsBoolean = 12;   % Which arguments are boolean, IE don't require additional command line input
for i=1:length(varArgList)
    argVal = fpp.util.optInputs(varargin,varArgList{i});
    if ~isempty(argVal)
        if ischar(argVal)
            eval([varArgList{i} ' = argVal;']);
        else
            eval([varArgList{i} ' = num2str(argVal);']);
        end
    else
        eval([varArgList{i} ' = [];']);
    end
end

% Define flirt command
cmd = ['flirt -in ' inputPath ' -ref ' referencePath];
if ~isempty(outputXfm)
    cmd = [cmd ' -omat ' outputXfm];
end
if ~isempty(outputPath)
    cmd = [cmd ' -out ' outputXfm];
end

% Add non-boolean additional variables
for i=setdiff(1:length(varArgList),indArgIsBoolean)
    if ~isempty(eval(varArgList{i}))
        eval(['cmd = [cmd '' -' varArgList{i} ' ' eval(varArgList{i}) '''];']);
    end
end
% Add boolean additional variables
for i=indArgIsBoolean
    if ~isempty(eval(varArgList{i}))
        eval(['cmd = [cmd '' -' varArgList{i} '''];']);
    end
end

% Run flirt command
fpp.util.system(cmd);

% Write json output files
inputJsonPath = fpp.bids.jsonPath(inputPath);
if exist(inputJsonPath,'file')
    if exist('outputXfm','var')
        outputXfmJsonPath = fpp.bids.jsonPath(outputXfm);
        if ~exist('dof','var'), dof = 12; end   % Assume FLIRT default dof
        jsonData.Type = [int2str(dof) 'dof affine'];
        jsonData.Software = 'FLIRT';
        [~,flirtName] = fpp.util.system('flirt -version');
        jsonData.SoftwareVersion = strrep(strtrim(flirtName),'FLIRT version ','');
        jsonData.Invertible = true;
        jsonData.FromFile = inputPath;
        jsonData.ToFile = referencePath;
        jsonData.CommandLine = cmd;
        jsonData.Description = 'Affine transformation file generated by FLIRT.';
        bids.util.jsonencode(outputXfmJsonPath,jsonData,jsonOpts);
    end
    if exist('outputPath','var')
        outputJsonPath = fpp.bids.jsonPath(outputPath);
        fpp.bids.jsonReconstruct(inputJsonPath,outputJsonPath);
        fpp.bids.jsonChangeValue(outputJsonPath,'SpatialRef',...
            strrep(referencePath,fpp.bids.checkBidsDir(referencePath),''));
    end
end

end