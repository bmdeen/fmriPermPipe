
% Wrapper for FSL's aff2rigid, to reduce a 12-DOF registration to standard
% space to 6-DOF. Generates .json metadata for output xfm.
%
% fpp.fsl.aff2Rigid(inputXfm,outputXfm)

function aff2Rigid(inputXfm,outputXfm)

% Define variable defaults
jsonOpts.indent = '\t';     % Use tab indentation for JSON outputs

if ~exist('outputXfm','var') || isempty(outputXfm)
    % Check if filename contains desc field
    [~,inputName,~] = fpp.util.fileParts(inputPath);
    entities = split(inputName,'_');
    descStr = '';
    for e=1:length(entities)
        if contains(entities{e},'desc-')
            matchStr = regexp(entities{e},'desc-.*','match');
            descStr = strrep(matchStr{1},'desc-','');
        end
    end
    % Define new desc field
    descStr = [descStr '6dof'];
    
    % Define output filename
    outputXfm = fpp.bids.changeName(inputXfm,'desc',descStr);
end

cmd = ['aff2rigid ' inputXfm ' ' outputXfm];

% Run aff2rigid command
fpp.util.system(cmd);

% Write json output files
if ~isempty(fpp.bids.getMetadata(inputXfm))
    outputXfmJsonPath = fpp.bids.jsonPath(outputXfm);
    jsonData = fpp.bids.getMetadata(inputXfm);
    jsonData.Type = '6-dof affine';
    jsonData.Software = 'aff2rigid';
    jsonData.SoftwareVersion = '';
    jsonData.Invertible = true;
    jsonData.CommandLine = cmd;
    jsonData.Description = 'Affine transformation file generated by aff2rigid.';
    bids.util.jsonencode(outputXfmJsonPath,jsonData,jsonOpts);
end

end