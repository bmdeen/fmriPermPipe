
% Function to apply slice timing correction using FSL's slicetimer.
% Second two arguments are optional, will be read from data by default.
%
% Arguments:
% - inputPaths (cell array of strings): paths to input data
% - sliceTimes

function [errorMsg,outputPaths] = sliceTimingCorrect(inputPaths,sliceTimes,tr,outputDescShort,outputDescLong)

errorMsg = [];
outputPaths = [];

% Check slice timing info and TR, if not specified
if isempty(sliceTimes)
    sliceTimes = fpp.util.checkMRIProperty('ST',inputPaths{1});
    if isempty(sliceTimes)
        errorMsg = 'ERROR: slice timing info could not be determined.';
        return;
    end
end
if isempty(tr)
    tr = fpp.util.checkMRIProperty('TR',inputPaths{1});
    if isempty(tr)
        errorMsg = 'ERROR: TR could not be determined.';
        return;
    end
end
% Define description info for output files
if ~exist('outputDescShort','var') || isempty(outputDescShort)
    outputDescShort = 'midprep2stc';
end
if ~exist('outputDescLong','var') || isempty(outputDescLong)
    outputDescLong = 'Partially preprocessed data generated by fmriPermPipe, saved after slice timing correction step.';
end

% Write ST info to temporary text file
[inputDir,~,~] = fpp.util.fileParts(inputPaths{1});
stFilePath = [inputDir '/tmp_slice_timing_file.txt'];
fid = fopen(stFilePath,'w+');
fprintf(fid,'%f\n',sliceTimes/tr);
fclose(fid);

% Apply FSL's slicetimer
for e=1:length(inputPaths)
    outputPaths{e} = fpp.bids.changeName(inputPaths{e},'desc',outputDescShort);
    fpp.util.system(['slicetimer -i ' inputPaths{e} ' -o ' outputPaths{e} ' --tcustom=' stFilePath]);
    fpp.bids.jsonReconstruct(inputPaths{e},outputPaths{e});
    fpp.bids.jsonChangeValue(outputPaths{e},{'Description','Sources'},...
        {outputDescLong,fpp.bids.removeBidsDir(inputPaths{e})});
end

fpp.util.system(['rm -rf ' stFilePath]);

end