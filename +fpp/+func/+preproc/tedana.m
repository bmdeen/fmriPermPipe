
% fpp.func.preproc.tedana(inputPaths,outputPaths,outputDescription,useTedana)
%
% Wrapper for tedana and t2smap, that renames outputs based on input name.
%
% Optional arguments:
%   - outputDescription (string): contents of output json Description field
%   - useTedana (boolean): whether to use tedana or just t2smap

function tedana(inputPaths,outputPath,maskPath,outputDescription,useTedana)

% Handle optional variable
if ~exist('useTedana','var') || isempty(noICA)
    useTedana = 1;
end
if ~exist('outputDescription','var')
    outputDescription = '';
end

% Check output directory
[outputDir,~,~] = fileparts(outputPath);
% Check input properties
teVals = fpp.util.checkMRIProperty('TE',inputPaths{1});

% Create a wrapper function for converting '.nii.gz' to '.json'
convertNiiJson = @(x) strrep(x,'.nii.gz','.json');
% Create a wrapper to remove BIDS base directory from path
bidsBaseDir = fpp.bids.checkBidsDir(outputDir);  % BIDS root directory
removeBidsBaseDir = @(x) strrep(x,[bidsBaseDir '/'],'');

% Place output in temporary directory to delete extra results
outputDir = [outputDir '/tedanaTmp'];
mkdir(outputDir);

if useTedana
    
    % Define i/o variables
    if isempty(outputDescription)
        outputDescription = 'Partially preprocessed data generated by fmriPermPipe, saved after TEDANA denoising step.';
    end
    inputPathStr = join(inputPaths,' ');
    
    % Run tedana
    fpp.util.system(['tedana -d ' inputPathStr{1} ' -e ' sprintf('%f ',teVals) ' --out-dir ' ...
        outputDir ' --mask ' maskPath ' --verbose']);
    
    % Rename main outputs
    fpp.util.system(['mv ' outputDir '/t2svG.nii.gz ' strrep(outputPath,'_bold.nii.gz','_T2star.nii.gz')]);
    fpp.util.system(['mv ' outputDir '/s0vG.nii.gz ' strrep(outputPath,'_bold.nii.gz','_S0map.nii.gz')]);
    fpp.util.system(['mv ' outputDir '/dn_ts_OC.nii.gz ' outputPath]);
    fpp.util.system(['mv ' outputDir '/ts_OC.nii.gz ' fpp.bids.changeName(outputPath,'desc','midprep4optcomb')]);
    
    % Define main json file
    fpp.bids.jsonReconstruct(convertNiiJson(inputPaths{1}),convertNiiJson(outputPath));
    fpp.bids.jsonChangeValue(convertNiiJson(outputPath),{'Description','Sources','EchoTime','EchoNumber'},...
        {outputDescription,cellfun(removeBidsBaseDir,inputPaths,'UniformOutput',false),teVals,[]});
    
    % Rename component analysis results outputs
    fpp.util.system(['mv ' outputDir '/tedana_*.tsv ' fpp.bids.changeName(outputPath,'desc','tedanaICA','log','.tsv')]);
    fpp.util.system(['mv ' outputDir '/figures ' strrep(fpp.bids.changeName(outputPath,...
        {'space','desc'},{[],[]}),'_bold.nii.gz','_images')]);
    fpp.util.system(['mv ' outputDir '/betas_OC.nii.gz ' fpp.bids.changeName(outputPath,'desc','tedanaICA','betas')]);
    fpp.util.system(['mv ' outputDir '/feats_OC2.nii.gz ' fpp.bids.changeName(outputPath,'desc','tedanaICAzscore','components')]);
    methods = {'PCA','ICA'}; suffices = {'components','decomposition','mixing'};
    componentExts = {'.nii.gz','.json','.tsv'};
    for m=1:2
        for s=1:3
            fpp.util.system(['mv ' outputDir '/' lower(methods{m}) '_' suffices{s} componentExts{s} ' ' ...
                fpp.bids.changeName(outputPath,'desc',['tedana' methods{m}],suffices{s},componentExts{s})]);
        end
    end
else
    
    % Define i/o variables
    if isempty(outputDescription)
        outputDescription = ['Partially preprocessed data generated by fmriPermPipe, '...
            ' saved after multi-echo combination step.'];
    end
    inputPathStr = join(inputPaths,' ');
    
    % Run t2smap
    fpp.util.system(['t2smap -d ' inputPathStr{1} ' -e ' sprintf('%f ',teVals) ' --out-dir ' ...
        outputDir ' --mask ' maskPath]);
    
    % Rename outputs
    fpp.util.system(['mv ' outputDir '/desc-full_T2starmap.nii.gz ' strrep(outputPath,'_bold.nii.gz','_T2star.nii.gz')]);
    fpp.util.system(['mv ' outputDir '/desc-full_S0map.nii.gz ' strrep(outputPath,'_bold.nii.gz','_S0map.nii.gz')]);
    fpp.util.system(['mv ' outputDir '/desc-optcom_bold.nii.gz ' outputPath]);
    
    % Define main json file
    fpp.bids.jsonReconstruct(convertNiiJson(inputPaths{1}),convertNiiJson(outputPath));
    fpp.bids.jsonChangeValue(convertNiiJson(outputPath),{'Description','Sources','EchoTime','EchoNumber'},...
        {'Partially preprocessed data generated by fmriPermPipe, saved after multi-echo combination step.',...
        cellfun(removeBidsBaseDir,inputPaths,'UniformOutput',false),teVals,[]});
    
end

% Delete unneeded results
fpp.util.system(['rm -rf ' outputDir]);

end
