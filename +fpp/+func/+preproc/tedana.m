
% Wrapper for tedana and t2smap; renames outputs based on input name, and
% generates JSON metadata for outputs.
%
% fpp.func.preproc.tedana(inputPaths,outputPaths,outputDescription,useTedana)
%
% Arguments:
%   - inputPaths (cell array of strings): paths to input images for each
%     echo
%   - outputPath (string): path to output image
%
% Optional arguments:
%   - outputDescription (string): contents of output json Description field
%   - useTedana (boolean): whether to use tedana or just t2smap
%   - teVals (vector of values in (0,Inf)): TE values (ms) for multi-echo 
%       data (default: read from json)

function tedana(inputPaths,outputPath,maskPath,outputDescription,useTedana,teVals)

% Handle optional variable
if ~exist('useTedana','var') || isempty(useTedana)
    useTedana = 1;
end
if ~exist('outputDescription','var')
    outputDescription = '';
end
if ~exist('teVals','var') || isempty(teVals)
    teVals = fpp.util.checkMRIProperty('TE',inputPaths{1});
end

% Check output directory, add _bold.nii.gz if missing
[outputDir,outputName,outputExt] = fpp.util.fileParts(outputPath);
if isempty(outputDir), outputDir = pwd; end
if ~strcmp(outputName(end-4:end),'_bold')
    outputName = [outputName '_bold'];
end
outputExt = '.nii.gz';
outputPath = [outputDir '/' outputName outputExt];
[~,inputName,~] = fpp.util.fileParts(inputPaths{1});

% Place output in temporary directory to delete extra results
outputDir = [outputDir '/tedanaTmp' inputName];
mkdir(outputDir);

% Define wrapper function for fpp.bids.removeBidsDir (for cellfun functionality)
removeBidsDir = @(x) fpp.bids.removeBidsDir(x);

if useTedana
    
    % Define i/o variables
    if isempty(outputDescription)
        outputDescription = 'Partially preprocessed data generated by fmriPermPipe, saved after TEDANA denoising step.';
    end
    inputPathStr = join(inputPaths,' ');
    
    % Run tedana
    fpp.util.system(['tedana -d ' inputPathStr{1} ' -e ' sprintf('%f ',teVals) ' --out-dir ' ...
        outputDir ' --mask ' maskPath ' --verbose']);
    
    % Create output directory
    outputDirTedana = strrep(fpp.bids.changeName(outputPath,{'space','desc'},{[],[]}),'_bold.nii.gz','_tedana');
    fpp.util.system(['mv ' outputDir '/figures ' outputDirTedana]);
    outputPathTedana = [outputDirTedana '/' outputName outputExt];
    
    % Rename main outputs
    fpp.util.system(['mv ' outputDir '/t2svG.nii.gz ' strrep(outputPathTedana,'_bold.nii.gz','_T2star.nii.gz')]);
    fpp.util.system(['mv ' outputDir '/s0vG.nii.gz ' strrep(outputPathTedana,'_bold.nii.gz','_S0map.nii.gz')]);
    fpp.util.system(['mv ' outputDir '/dn_ts_OC.nii.gz ' outputPath]);
    fpp.util.system(['mv ' outputDir '/ts_OC.nii.gz ' fpp.bids.changeName(outputPath,'desc','midprep4optcomb')]);
    
    % Define main json file
    fpp.bids.jsonReconstruct(inputPaths{1},outputPath,'midprepfmri');
    fpp.bids.jsonChangeValue(outputPath,{'Description','Sources','EchoTime','EchoNumber'},...
        {outputDescription,cellfun(removeBidsDir,inputPaths,'UniformOutput',false),teVals/1000,[]});
    % Define non-denoised json file
    fpp.bids.jsonReconstruct(inputPaths{1},fpp.bids.changeName(outputPath,'desc','midprep4optcomb'),'midprepfmri');
    fpp.bids.jsonChangeValue(fpp.bids.changeName(outputPath,'desc','midprep4optcomb'),{'Sources','EchoTime','EchoNumber'},...
        {cellfun(removeBidsDir,inputPaths,'UniformOutput',false),teVals/1000,[]});
    
    % Rename component analysis results outputs
    fpp.util.system(['mv ' outputDir '/tedana_*.tsv ' fpp.bids.changeName(outputPathTedana,'desc','tedanaICA','log','.tsv')]);
    fpp.util.system(['mv ' outputDir '/betas_OC.nii.gz ' fpp.bids.changeName(outputPathTedana,'desc','tedanaICA','betas')]);
    fpp.util.system(['mv ' outputDir '/feats_OC2.nii.gz ' fpp.bids.changeName(outputPathTedana,'desc','tedanaICAzscore','components')]);
    methods = {'PCA','ICA'}; suffices = {'components','decomposition','mixing'};
    componentExts = {'.nii.gz','.json','.tsv'};
    for m=1:2
        for s=1:3
            fpp.util.system(['mv ' outputDir '/' lower(methods{m}) '_' suffices{s} componentExts{s} ' ' ...
                fpp.bids.changeName(outputPathTedana,'desc',['tedana' methods{m}],suffices{s},componentExts{s})]);
        end
    end
    
    % Save rejected component mixing matrix (output data time series are orthogonal to these components)
    mixPath = fpp.bids.changeName(outputPathTedana,'desc','tedanaICA','mixing','.tsv');
    mixPathOut = fpp.bids.changeName(outputPathTedana,'desc','tedanaICARejected','mixing','.tsv');
    decompPath = fpp.bids.changeName(outputPathTedana,'desc','tedanaICA','decomposition','.json');
    mixTSV = bids.util.tsvread(mixPath);
    decompJson = bids.util.jsondecode(decompPath);
    if isfield(decompJson,'ica_000')
        nDigits = 3;
    else
        nDigits = 2;
    end
    % Remove non-rejected components from mixTSV
    for i=0:length(fields(mixTSV))-1
        if ~strcmpi(decompJson.(['ica_' fpp.util.numPad(i,nDigits)]).classification,'rejected')
            mixTSV = rmfield(mixTSV,['ica_' fpp.util.numPad(i,nDigits)]);
        end
    end
    fpp.bids.tsvWrite(mixPathOut,mixTSV);
    
else
    
    % Define i/o variables
    if isempty(outputDescription)
        outputDescription = ['Partially preprocessed data generated by fmriPermPipe, '...
            ' saved after multi-echo combination step.'];
    end
    inputPathStr = join(inputPaths,' ');
    
    % Run t2smap
    fpp.util.system(['t2smap -d ' inputPathStr{1} ' -e ' sprintf('%f ',teVals) ' --out-dir ' ...
        outputDir ' --mask ' maskPath]);
    
    % Rename outputs
    fpp.util.system(['mv ' outputDir '/desc-full_T2starmap.nii.gz ' strrep(outputPath,'_bold.nii.gz','_T2star.nii.gz')]);
    fpp.util.system(['mv ' outputDir '/desc-full_S0map.nii.gz ' strrep(outputPath,'_bold.nii.gz','_S0map.nii.gz')]);
    fpp.util.system(['mv ' outputDir '/desc-optcom_bold.nii.gz ' outputPath]);
    
    % Define main json file
    fpp.bids.jsonReconstruct(inputPaths{1},outputPath,'midprepfmri');
    fpp.bids.jsonChangeValue(outputPath,{'Description','Sources','EchoTime','EchoNumber'},...
        {outputDescription,cellfun(removeBidsDir,inputPaths,'UniformOutput',false),teVals/1000,[]});
    
end

% Delete unneeded results
fpp.util.system(['rm -rf ' outputDir]);

end
