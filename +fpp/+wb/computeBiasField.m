
% Function to compute bias field using Human Connectome project approach,
% by measuring sqrt(T1*T2). Requires aligned input T1/T2 images, and a
% rough brain mask.
%
% fpp.wb.computeBiasField(inputT1Path,inputT2Path,inputMask,outputBiasPath,...
%   outputDescription,appendDescription)
%
% This script is a modified version of the Human Connectome Project's
% script BiasFieldCorrection_sqrtT1wXT2w.sh
% See: https://www.humanconnectome.org/software/hcp-mr-pipelines;
% Glasser et al. 2013, "The minimal preprocessing pipelines for the Human 
% Connectome Project".

function computeBiasField(inputT1Path,inputT2Path,inputMask,outputBiasPath,outputDescription,appendDescription)

if ~exist('outputDescription','var') || isempty(outputDescription)
    outputDescription = 'Bias field, generated by sqrt(T1*T2) method.';
end
if ~exist('appendDescription','var') || isempty(appendDescription)
    appendDescription = 0;
end

% Bias field definition parameters
smoothingSigma = num2str(5);    % Smooth sqrt(T1*T2) by this much to get bias field
brainThreshFactor = .5; % Number of standard deviations below the mean sqrt(T1*T2) value to threshold the non-brain tissues at

[inputDir,~,extT1] = fpp.util.fileParts(inputT1Path);
[~,~,extT2] = fpp.util.fileParts(inputT2Path);
[~,~,extMask] = fpp.util.fileParts(inputT2Path);
if isempty(inputDir), inputDir = pwd; end

tmpDir = [inputDir '/tmpBiasField1059232910'];
mkdir(tmpDir);

% Copy files, omitting json sidecars (not needed for internal operations)
fpp.util.system(['cp ' inputT1Path ' ' tmpDir '/T1w' extT1]);
inputT1Path = [tmpDir '/T1w' extT1];
fpp.util.system(['cp ' inputT2Path ' ' tmpDir '/T2w' extT2]);
inputT2Path = [tmpDir '/T2w' extT2];
fpp.util.system(['cp ' inputMask ' ' tmpDir '/mask' extMask]);
inputMask = [tmpDir '/mask' extMask];

% Form sqrt(T1w*T2w), mask, and normalise by the mean
fpp.fsl.fslMaths(inputT1Path,['-mul ' inputT2Path ' -abs -sqrt'],[tmpDir '/T1wmulT2w.nii.gz']);
fpp.fsl.fslMaths([tmpDir '/T1wmulT2w.nii.gz'],['-mas ' inputMask],[tmpDir '/desc-brain_T1wmulT2w.nii.gz']);
[~,meanBrainVal] = fpp.util.system(['fslstats ' tmpDir '/desc-brain_T1wmulT2w.nii.gz -M']);
meanBrainVal = str2num(strtrim(meanBrainVal));
fpp.fsl.fslMaths([tmpDir '/desc-brain_T1wmulT2w.nii.gz'],['-div ' ...
    num2str(meanBrainVal)],[tmpDir '/desc-brainNorm_T1wmulT2w.nii.gz']);

% Smooth the normalised sqrt image, using within-mask smoothing : s(Mask*X)/s(Mask)
fpp.fsl.fslMaths([tmpDir '/desc-brainNorm_T1wmulT2w.nii.gz'],['-bin -s ' smoothingSigma],...
    [tmpDir '/desc-Sm' smoothingSigma '_mask.nii.gz']);
fpp.fsl.fslMaths([tmpDir '/desc-brainNorm_T1wmulT2w.nii.gz'],['-s ' smoothingSigma ...
    ' -div ' tmpDir '/desc-Sm' smoothingSigma '_mask.nii.gz'],[tmpDir '/desc-brainNormSm' smoothingSigma '_T1wmulT2w.nii.gz']);

% Divide normalised sqrt image by smoothed version (to do simple bias correction)
fpp.fsl.fslMaths([tmpDir '/desc-brainNorm_T1wmulT2w.nii.gz'],...
    ['-div ' tmpDir '/desc-brainNormSm' smoothingSigma '_T1wmulT2w.nii.gz'],...
    [tmpDir '/desc-brainNormModulate_T1wmulT2w.nii.gz']);

% Create a mask using a threshold at Mean - 0.5*Stddev, with filling of holes to remove any non-grey/white tissue.
[~,stdVal] = fpp.util.system(['fslstats ' tmpDir '/desc-brainNormModulate_T1wmulT2w.nii.gz -S']);
stdVal = str2num(strtrim(stdVal));
[~,meanVal] = fpp.util.system(['fslstats ' tmpDir '/desc-brainNormModulate_T1wmulT2w.nii.gz -M']);
meanVal = str2num(strtrim(meanVal));
lowerVal = meanVal-(stdVal*brainThreshFactor);
fpp.fsl.fslMaths([tmpDir '/desc-brainNormModulate_T1wmulT2w.nii.gz'],...
    ['-thr ' num2str(lowerVal) ' -bin -ero -mul 255'],...
    [tmpDir '/desc-brainThreshT1wmulT2w_mask.nii.gz']);
system(['wb_command -volume-remove-islands ' tmpDir '/desc-brainThreshT1wmulT2w_mask.nii.gz '...
    tmpDir '/desc-brainThreshT1wmulT2w_mask.nii.gz']);

% Extrapolate normalised sqrt image from mask region out to whole FOV
fpp.fsl.fslMaths([tmpDir '/desc-brainNorm_T1wmulT2w.nii.gz'],...
    [' -mas ' tmpDir '/desc-brainThreshT1wmulT2w_mask.nii.gz -dilall'],...
    [tmpDir '/bias.nii.gz']);
fpp.fsl.fslMaths([tmpDir '/bias.nii.gz'],['-s ' smoothingSigma],[tmpDir '/bias.nii.gz']);

% Copy output bias field to outputBiasPath, delete tmpDir
fpp.util.system(['cp ' tmpDir '/bias.nii.gz ' outputBiasPath]);
fpp.util.system(['rm -rf ' tmpDir]);

% Copy / modify json file, if it exists
inputJsonPath = strrep(inputT1Path,extT1,'.json');
if exist(inputJsonPath,'file')
    outputJsonPath = strrep(outputBiasPath,outputExt,'.json');
    fpp.bids.jsonReconstruct(inputJsonPath,outputJsonPath,'mri');
    fpp.bids.jsonChangeValue(fpp.bids.jsonPath(outputT2Path),'Description',...
        outputDescription,appendDescription);
    fpp.bids.jsonChangeValue(fpp.bids.jsonPath(outputT2Path),'Sources',...
        {fpp.bids.removeBidsDir(inputT1Path),fpp.bids.removeBidsDir(inputT2Path)});
end

end