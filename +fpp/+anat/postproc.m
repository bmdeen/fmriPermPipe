%
% fpp.anat.postproc(subjID,inputT1Path,fsSubDir,varargin)
% 
% Script to post-process anatomical data after Freesurfer reconstruction. 
% Includes nifti/gifti conversion, brain/gm/wm/csf mask generation, 
% MSM-based registration to fsLR space, and CIFTI and spec file generation.
% 
% Arguments:
% - subjID (string): subject ID
% - inputT1Path (string): path to preprocessed anatomical image
% - fsSubDir (string): freesurfer subject directory for this subject
% 
% Variable arguments:
% - overwrite (boolean): whether to overwrite existing outputs
% 
% This script is a modified version of the Human Connectome Project's
% PostFreesurfer pipeline (https://www.humanconnectome.org/software/hcp-mr-pipelines;
% Glasser et al. 2013, "The minimal preprocessing pipelines for the Human 
% Connectome Project").

function postproc(subjID,inputT1Path,fsSubDir,varargin)

% TODO:
% - Convert HCP-style LUT files to BIDS-style dseg.tsv files for all
%   segmentations
% - Avoid writing in SUBJECTS_DIR; copy to anatPreprocDir first
%   - SPECIFICALLY: For orig.mgz, convert to a file in anat dir and DEFINE
%     JSON FILE before generating registration files
% - Add RawSources metadata
% - Add HCP myelin map definition

% Check system configuration
fpp.util.checkConfig;

% Use tab indentation for JSON outputs
jsonOpts.indent = '\t';

% Parameters
funcResolution = '2';   % Resolution of down-sampled anatomical for functional analysis
                        % Other options may be added later; this is currently the only working option

% Variable arguments
overwrite = 0;

% Edit variable arguments.  Note: optInputs checks for proper input.
varArgList = {'overwrite'};
for i=1:length(varArgList)
    argVal = fpp.util.optInputs(varargin,varArgList{i});
    if ~isempty(argVal)
        eval([varArgList{i} ' = argVal;']);
    end
end

if ~exist(inputT1Path,'file')
    error('inputT1Path does not exist.')
end
if ~exist(fsSubDir,'dir')
    error('fsSubDir does not exist.')
end

% Define directories
[anatPreprocDir,~,~] = fpp.util.fileParts(inputT1Path);
if isempty(anatPreprocDir), anatPreprocDir = pwd; end
[fppFuncDir,~,~]		= fileparts(mfilename('fullpath'));			% path to the directory containing this script
tmp = dir([fppFuncDir '/../../data']);
dataDir = tmp(1).folder;

% Check if output exists.
finalOutputPath = fpp.bids.changeName(inputT1Path,{'space','den','desc','res'},{'fsLR','32k',[],[]},'brain','.spec');
if exist(finalOutputPath,'file') && ~overwrite
    return;
end

% Write json file with density info
densityJsonPath = [anatPreprocDir '/tmpDensity102941.json'];
fid = fopen(densityJsonPath,'wt');
fprintf(fid, ['{"native":"High-density native surface mesh generated by Freesurfer",'...
    '"32k":"32k vertices per hemisphere, coordinates aligned with fsLR space",'...
    '"164k":"164k vertices per hemisphere"}']);
fclose(fid);
densityJson = bids.util.jsondecode(densityJsonPath);
fpp.util.system(['rm -rf ' densityJsonPath]);

% Freesurfer and Connectome Workbench names
hemis = {'lh','rh'};
Hemis = {'L','R'};
structures = {'CORTEX_LEFT','CORTEX_RIGHT'};

surfaces = {'white','pial'};
types = {'ANATOMICAL','ANATOMICAL'};
types2 = {'GRAY_WHITE','PIAL'};

shapes = {'sulc','thickness','curv'};
mapNames = {'Sulc','Thickness','Curvature'};

% Paths
mriDir = [fsSubDir '/mri'];
surfDir = [fsSubDir '/surf'];

origPath = [mriDir '/orig.nii.gz'];
crasXfm = [mriDir '/c_ras.mat'];

inputT2Path = fpp.bids.changeName(inputT1Path,'','','T2w','.nii.gz');
if ~exist(inputT2Path,'file'), inputT2Path = []; end

midthickPaths{1} = fpp.bids.changeName(inputT1Path,{'hemi','den','desc','res'},{'L','native',[],[]},'midthickness','.surf.gii');
midthickPaths{2} = fpp.bids.changeName(midthickPaths{1},'hemi','R');
individual2FsnativeXfm = fpp.bids.changeName(inputT1Path,{'desc','space','from','to','mode','res'},...
    {[],[],'individual','fsnative','image',[]},'xfm','.mat');
fsnative2IndividualXfm = fpp.bids.changeName(individual2FsnativeXfm,{'from','to'},{'fsnative','individual'});

for h=1:2
    fsLRSpherePaths{h}{1} = [anatPreprocDir '/hemi-' Hemis{h} '_space-fsLR_den-32k_sphere.surf.gii'];
    fsLRSpherePaths{h}{2} = strrep(fsLRSpherePaths{h}{1},'den-32k','den-164k');
end

standardSpace = 'MNI152NLin6ASym';
standardPathFuncResBrain = [anatPreprocDir '/space-' standardSpace '_res-' funcResolution '_desc-brain_T1w.nii.gz'];



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 1: Register fsnative to individual anatomical space
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 1, Register fsnative to individual        - ' subjID]);
fpp.fs.mriConvert(strrep(origPath,'.nii.gz','.mgz'),origPath);  % Convert orig to .nii.gz
fpp.fsl.flirt(inputT1Path,origPath,individual2FsnativeXfm,[],'dof',6);
fpp.fsl.invertXfm(individual2FsnativeXfm,fsnative2IndividualXfm);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 2: Convert volumetric files to individual
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 2, Convert volumetric files to individual - ' subjID]);
fpp.util.system(['cp ' dataDir '/desc-freesurfer_lut.txt ' anatPreprocDir '/desc-freesurfer_lut.txt']);
fpp.util.system(['cp ' dataDir '/desc-wbsubcortical_lut.txt ' anatPreprocDir '/desc-wbsubcortical_lut.txt']);
parcs = {'wmparc','aparc+aseg','aparc.a2009s+aseg'};    % Volumetric parcs
parcsOut = {'wmparc','aparcaseg','aparc09aseg'};        % Volumetric parcs output name
% Convert parcs to individual
for p=1:length(parcs)
    inputPath = [mriDir '/' parcs{p} '.nii.gz'];
    outputPath = fpp.bids.changeName(inputT1Path,'desc',parcsOut{p},'dseg','.nii.gz');
    fpp.fs.mriConvert(strrep(inputPath,'.nii.gz','.mgz'),inputPath);  % Convert orig to .nii.gz
    fpp.fsl.moveImage(inputPath,inputT1Path,outputPath,fsnative2IndividualXfm,'interp','nn');
    fpp.wb.command('volume-label-import',outputPath,[anatPreprocDir '/desc-freesurfer_lut.txt'],outputPath,'-drop-unused-labels');
    if strcmp(parcs{p},'wmparc'), wmPath = outputPath; end
    jsonData.Sources = fpp.bids.removeBidsDir(inputPath);
    jsonData.SpatialRef = fpp.bids.removeBidsDir(inputT1Path);
    bids.util.jsonencode(fpp.bids.jsonPath(outputPath),jsonData,jsonOpts);
end
% Define brain mask
maskPath = fpp.bids.changeName(inputT1Path,{'desc'},{'brainFS'},'mask','.nii.gz');
fpp.fsl.maths(wmPath,'-bin -dilD -dilD -dilD -ero -ero',maskPath);
fpp.bids.jsonChangeValue(maskPath,'Type','Brain');
fpp.wb.command('volume-fill-holes',maskPath,[],maskPath);
fpp.fsl.maths(maskPath,'-bin',maskPath);
% Convert vmPFCLarge ROI from MNI to individual, add to FS brain mask
% Goal: ensure that none of vmPFC gray matter is excluded, despite issues with FS recon in this area
standard2IndividualXfm = fpp.bids.changeName(inputT1Path,{'from','to','mode','space','desc','res'},...
    {standardSpace,'individual','image','','',[]},'xfm','.nii.gz');
vmPFCMaskPathStd = [dataDir '/space-MNI152Nlin6Asym_res-2_desc-vmPFCLarge_mask.nii.gz'];
vmPFCMaskPath = fpp.bids.changeName(inputT1Path,{'desc'},{'vmPFCLarge'},'mask','.nii.gz');
fpp.fsl.moveImage(vmPFCMaskPathStd,inputT1Path,vmPFCMaskPath,[],'warp',...
    standard2IndividualXfm,'rel',1,'interp','nn');
fpp.fsl.maths(maskPath,['-add ' vmPFCMaskPath ' -bin'],maskPath);
% Mask brain images
fpp.fsl.maths(inputT1Path,['-mul ' maskPath],fpp.bids.changeName(inputT1Path,'desc','preprocBrain'));
if exist(inputT2Path,'file')
    fpp.fsl.maths(inputT2Path,['-mul ' maskPath],fpp.bids.changeName(inputT2Path,'desc','preprocBrain'));
end
% Generate dilated brain mask to convert to func template space
fpp.fsl.maths(maskPath,'-dilD',fpp.bids.changeName(maskPath,'desc','brainFSdil1'));



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 3: Generate segment masks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 3, Generate segment masks                 - ' subjID]);
roiNames = {'gm','wm','csf'};
flagStrs = {'--gm','--ctx-wm','--ventricles'};
parcVolPath = fpp.bids.changeName(wmPath,'desc','aparc+aseg');
for r=1:length(roiNames)
    roiPath = fpp.bids.changeName(parcVolPath,'desc',roiNames{r},'mask');
    fpp.util.system(['mri_binarize --i ' parcVolPath ' --o ' roiPath ' ' flagStrs{r}]);
    fpp.bids.jsonReconstruct(parcVolPath,roiPath);
    fpp.bids.jsonChangeValue(roiPath,'Description',['Freesurfer-derived ' roiNames{r} ' mask.']);
end
% MNI subcortical dseg
subcortSegName = ['space-' standardSpace '_res-' funcResolution '_desc-subcorticalAtlas_dseg.nii.gz'];
subcortSegMNIPath = [anatPreprocDir '/' subcortSegName];
fpp.util.copyImageAndJson([dataDir '/space-' standardSpace '_res-' funcResolution...
    '_desc-brain_T1w.nii.gz'],standardPathFuncResBrain);
fpp.util.copyImageAndJson([dataDir '/' subcortSegName],subcortSegMNIPath);
fpp.wb.command('volume-label-import',subcortSegMNIPath,[anatPreprocDir '/desc-freesurfer_lut.txt'],...
    subcortSegMNIPath,'-drop-unused-labels');
% Subcortical dseg
subcortSegIndivPath = fpp.bids.changeName(wmPath,'desc','subcortical');
tmpMaskPath = fpp.bids.changeName(wmPath,'desc','tmpAnatPostproc105134514318');
fpp.fsl.maths(wmPath,[' -uthr 100 -mul ' fpp.bids.changeName(roiPath,'desc','gm')],subcortSegIndivPath);    % Subcortex only
fpp.fsl.maths(subcortSegIndivPath,'-uthr 85 -thr 85 -bin mul -1',tmpMaskPath);                         % Remove optic chiasm
fpp.fsl.maths(subcortSegIndivPath,['-uthr 30 -thr 30 -bin mul -1 -add ' tmpMaskPath],tmpMaskPath);     % Remove left vessel
fpp.fsl.maths(subcortSegIndivPath,['-uthr 62 -thr 62 -bin mul -1 -add ' tmpMaskPath],tmpMaskPath);     % Remove right vessel
fpp.fsl.maths(subcortSegIndivPath,['-mul ' tmpMaskPath ' -thr 0'],subcortSegIndivPath);
fpp.wb.command('volume-label-import',subcortSegIndivPath,[anatPreprocDir '/desc-wbsubcortical_lut.txt'],subcortSegIndivPath);
% Subcortical GM
subcortROIPath = fpp.bids.changeName(roiPath,'desc','gmsubcortical');
fpp.fsl.maths(subcortSegIndivPath,'-bin',subcortROIPath);
fpp.bids.jsonReconstruct(parcVolPath,subcortROIPath);
fpp.bids.jsonChangeValue(subcortROIPath,'Description','Freesurfer-derived subcortical gm mask.');
% Cortical GM
cortROIPath = fpp.bids.changeName(roiPath,'desc','gmcortical');
fpp.fsl.maths(fpp.bids.changeName(roiPath,'desc','gm'),['-sub ' subcortROIPath ' -thr 0'],cortROIPath);
fpp.bids.jsonReconstruct(parcVolPath,cortROIPath);
fpp.bids.jsonChangeValue(cortROIPath,'Description','Freesurfer-derived cortical gm mask.');



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 4: Convert surfaces to gifti
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 4, Convert surfaces to GIFTI              - ' subjID]);
fpp.util.writeCras([mriDir '/brain.finalsurfs.mgz'],crasXfm);   % Make c_ras.mat
for h=1:2
    % White/pial surfaces
    for s=1:length(surfaces)
        inputPath = [surfDir '/' hemis{h} '.' surfaces{s}];
        outputPath = fpp.bids.changeName(midthickPaths{h},[],[],surfaces{s});
        fpp.util.convertToGii(inputPath,outputPath,structures{h},crasXfm,{'Sources','Density','SpatialRef'},...
            {fpp.bids.removeBidsDir(inputPath),densityJson,fpp.bids.removeBidsDir(midthickPaths{h})}); 	% fsnative space
    end
    % Spherical surface
    inputPath = [surfDir '/' hemis{h} '.sphere'];
    spherePaths{h} = fpp.bids.changeName(midthickPaths{h},'','','sphere');
    fpp.util.convertToGii(inputPath,spherePaths{h},{structures{h},'SPHERICAL'},[],...
        {'Sources','Density','SpatialRef'},{fpp.bids.removeBidsDir(inputPath),...
        densityJson,fpp.bids.removeBidsDir(midthickPaths{h})});
    % Sphere registered to fsaverage
    inputPath = [surfDir '/' hemis{h} '.sphere.reg'];
    sphereRegPaths{h} = fpp.bids.changeName(midthickPaths{h},{'desc'},{'reg2fsavg'},'sphere');
    fpp.util.convertToGii(inputPath,sphereRegPaths{h},{structures{h},'SPHERICAL'},[],...
        {'Sources','Density','SpatialRef'},{fpp.bids.removeBidsDir(inputPath),...
        densityJson,fpp.bids.removeBidsDir(midthickPaths{h})});
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 5: Generate midthickness / inflated surfaces
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 5, Generate mid-thickness/inflated surfs  - ' subjID]);
for h=1:2
    % Generate mid-thickness surface by averaging white/pial
    fpp.wb.command('surface-average',[],[],midthickPaths{h},['-surf ' fpp.bids.changeName(midthickPaths{h},[],[],'pial')...
        ' -surf ' fpp.bids.changeName(midthickPaths{h},[],[],'white')]);
    fpp.wb.command('set-structure',midthickPaths{h},structures{h},[],...
        '-surface-type ANATOMICAL -surface-secondary-type MIDTHICKNESS');
    % Generate inflated and very inflated surface, using HCP method
    [~,nVerts] = fpp.util.system(['wb_command -file-information ' midthickPaths{h} ...
         ' | grep ''Number of Vertices:'' | cut -f2 -d: | tr -d ''[:space:]''']);
    nVerts = str2num(strtrim(nVerts));
    nativeInflationScale = .75*nVerts/32492; % HCP fsLR 32k used 0.75. Scale this for native mesh density
    fpp.wb.command('surface-generate-inflated',midthickPaths{h},fpp.bids.changeName(midthickPaths{h},[],[],'inflated'),...
        fpp.bids.changeName(midthickPaths{h},[],[],'vinflated'),['-iterations-scale ' num2str(nativeInflationScale)]);
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 6: Convert shape files to gifti
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 6, Convert shape files to GIFTI           - ' subjID]);
for h=1:2
    for s=1:length(shapes)
        inputPath = [surfDir '/' hemis{h} '.' shapes{s}];
        inputSurfPath = [surfDir '/' hemis{h} '.white'];
        outputPath = fpp.bids.changeName(midthickPaths{h},'','',shapes{s},'.shape.gii');
        fpp.util.convertToGii({inputPath,inputSurfPath},outputPath,structures{h},[],{'Sources','Density','SpatialRef'},...
            {fpp.bids.removeBidsDir(inputPath),densityJson,fpp.bids.removeBidsDir(midthickPaths{h})});
        fpp.wb.command('metric-math',[],'var * -1',outputPath,['-var var ' outputPath]);
        fpp.wb.command('set-map-names',outputPath,[],[],['-map 1 ' subjID '_' Hemis{h} '_' mapNames{s}]);
        fpp.wb.command('metric-palette',outputPath,'MODE_AUTO_SCALE_PERCENTAGE',[],...
            '-pos-percent 2 98 -palette-name Gray_Interp -disp-pos true -disp-neg true -disp-zero true');
        eval([shapes{s} 'Paths{h} = outputPath;']);
    end
    % Thickness-specific operations (HCP)
    outputPath = thicknessPaths{h};
    fpp.wb.command('metric-math',[],'abs(thickness)',outputPath,['-var thickness ' outputPath]);
    fpp.wb.command('metric-palette',outputPath,'MODE_AUTO_SCALE_PERCENTAGE',[],...
        '-pos-percent 4 96 -interpolate true -palette-name videen_style -disp-pos true -disp-neg false -disp-zero false');
    % Define GM mask
    maskPaths{h} = fpp.bids.changeName(outputPath,'desc','cortex','mask');
    fpp.wb.command('metric-math',[],'thickness > 0',maskPaths{h},['-var thickness ' outputPath]);
    fpp.wb.command('metric-fill-holes',midthickPaths{h},maskPaths{h},maskPaths{h});
    fpp.wb.command('metric-remove-islands',midthickPaths{h},maskPaths{h},maskPaths{h});
    fpp.wb.command('set-map-names',maskPaths{h},[],[],['-map 1 ' subjID '_' Hemis{h} '_ROI']);
    % Dilate thickness and curvature
    fpp.wb.command('metric-dilate',outputPath,[midthickPaths{h} ' 10'],outputPath,'-nearest');
    outputPath2 = strrep(outputPath,'thickness.shape','curv.shape');
    fpp.wb.command('metric-dilate',curvPaths{h},[midthickPaths{h} ' 10'],curvPaths{h},'-nearest');
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 7: Convert Freesurfer parcellations to gifti
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
parcs = {'aparc','aparc.a2009s'};
parcsOut = {'aparc','aparc09'};
fprintf('%s\n',['Step 7, Convert parcellations to GIFTI         - ' subjID]);
for h=1:2
    for p=1:length(parcs)
        inputPath = [fsSubDir '/label/' hemis{h} '.' parcs{p} '.annot'];
        inputSurfPath = [surfDir '/' hemis{h} '.white'];
        outputPath = fpp.bids.changeName(midthickPaths{h},'desc',parcsOut{p},'dseg','.label.gii');
        fpp.util.convertToGii({inputPath,inputSurfPath},outputPath,structures{h},[],{'Sources','Density','SpatialRef'},...
            {fpp.bids.removeBidsDir(inputPath),densityJson,fpp.bids.removeBidsDir(midthickPaths{h})});
        fpp.wb.command('set-map-names',outputPath,[],[],['-map 1 ' subjID '_' Hemis{h} '_' parcsOut{p}]);
        fpp.wb.command('gifti-label-add-prefix',outputPath,['"' Hemis{h} '_"'],outputPath);
        parcPaths{h}{p} = outputPath;
    end
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 8: Register fsnative to fsLR
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 8, Register fsnative to fsLR              - ' subjID]);
fpp.util.system(['cp ' dataDir '/*_space-fs* ' anatPreprocDir '/']);
fid = fopen([anatPreprocDir '/desc-medialwall_lut.txt'],'wt'); % Write MedialWall LUT
fprintf(fid,'%s\n','MEDIAL.WALL');  fprintf(fid,'%s\n','1 19 19 19 255');   fclose(fid);
msmDir = [anatPreprocDir '/MSMSulc'];
mkdir(msmDir);
for h=1:2
    % Concatenate fsaverage reg with fsaverage -> fsLR reg from HCP pipeline
    sphereRegFsLRPaths{h} = fpp.bids.changeName(sphereRegPaths{h},'desc','reg2fsLR');   % Final MSMSulc version
    sphereRegFsLRVertAreaPaths{h} = fpp.bids.changeName(sphereRegFsLRPaths{h},[],[],'area');
    sphereRegFsLRInitPaths{h} = fpp.bids.changeName(sphereRegPaths{h},'desc','reg2fsLRFreesurfer');
    sphereRegFsLRInitAffinePaths{h} = fpp.bids.changeName(sphereRegPaths{h},'desc','reg2fsLRFreesurferAffine');
    sphereRegFsLRInitAffineXfms{h} = fpp.bids.changeName(sphereRegPaths{h},{'space','den','desc','from','to'},...
        {[],[],'wbcmdAffine','fsnative','fsLR'},'xfm','.mat');
    fpp.wb.command('surface-sphere-project-unproject',sphereRegPaths{h},...
        [anatPreprocDir '/hemi-' Hemis{h} '_space-fsaverage_den-164k_sphere.surf.gii ' ...
        anatPreprocDir '/hemi-' Hemis{h} '_space-fsaverage_den-164k_desc-reg2fsLR_sphere.surf.gii'],...
        sphereRegFsLRInitPaths{h});
    
    % Add descriptions of transformation files
    fpp.bids.jsonChangeValue(sphereRegPaths{h},'Description',...
        ['fsnative surface coordinates registered to spatial alignment with '...
        'fsaverage spherical coordinates, using Freesurfer''s mris_register.']);
    fpp.bids.jsonChangeValue(sphereRegFsLRInitPaths{h},'Description',...
        ['fsnative surface coordinates registered to spatial alignment with '...
        'fsLR spherical coordinates, using Freesurfer''s mris_register '...
        'concatenated with an fsaverage -> fsLR transform.']);
    fpp.bids.jsonChangeValue(sphereRegFsLRPaths{h},'Description',...
        ['fsnative surface coordinates registered to spatial alignment with '...
        'fsLR spherical coordinates, using MSMSulc.']);
    
    % Compute fsnative -> fsLR affine transformation for initialization
    fpp.wb.command('surface-affine-regression',spherePaths{h},sphereRegFsLRInitPaths{h},sphereRegFsLRInitAffineXfms{h});
    fpp.wb.command('surface-apply-affine',spherePaths{h},sphereRegFsLRInitAffineXfms{h},sphereRegFsLRInitAffinePaths{h});
    fpp.wb.command('surface-modify-sphere',sphereRegFsLRInitAffinePaths{h},'100',sphereRegFsLRInitAffinePaths{h});
    
    % Compute MSM-based registration
    if ~exist([msmDir '/sub-' subjID '_hemi-' Hemis{h} '_desc-msm_sphere.reg.surf.gii'],'file') %%% TEMPORARY FOR DEBUGGING
        fpp.util.system(['/usr/local/bin/msm --conf=' dataDir '/MSMSulcStrainFinalconf'...
            ' --inmesh=' sphereRegFsLRInitAffinePaths{h}...
            ' --refmesh=' fsLRSpherePaths{h}{2}...
            ' --indata=' sulcPaths{h}...
            ' --refdata=' anatPreprocDir '/hemi-' Hemis{h} '_space-fsLR_den-164k_desc-AtlasRef_sulc.shape.gii'...
            ' --out=' msmDir '/sub-' subjID '_hemi-' Hemis{h} '_desc-msm_']);
    end
    system(['cp ' msmDir '/sub-' subjID '_hemi-' Hemis{h} '_desc-msm_sphere.reg.surf.gii ' sphereRegFsLRPaths{h}]);
    fpp.wb.command('set-structure',sphereRegFsLRPaths{h},structures{h});
    fpp.bids.jsonReconstruct(spherePaths{h},sphereRegFsLRPaths{h});
    
    % Compute areal/edge distortion from MSMSulc registration
    arealDistortionPaths{h} = fpp.bids.changeName(sulcPaths{h},'desc','reg2fsLRareal','distortion');
    edgeDistortionPaths{h} = fpp.bids.changeName(sulcPaths{h},'desc','reg2fsLRedge','distortion');
    fpp.wb.command('surface-distortion',spherePaths{h},sphereRegFsLRPaths{h},arealDistortionPaths{h});
    fpp.wb.command('surface-distortion',spherePaths{h},sphereRegFsLRPaths{h},edgeDistortionPaths{h},'-edge-method');
    
    % Take union of cortex ROI from subject and atlas
    maskAtlasPaths{h} = fpp.bids.changeName(maskPaths{h},'desc','cortexAtlas','mask');
    fpp.wb.command('metric-resample',...
        [anatPreprocDir '/hemi-' Hemis{h} '_space-fsLR_den-164k_desc-cortexAtlas_mask.shape.gii'],...
        [fsLRSpherePaths{h}{2} ' ' sphereRegFsLRPaths{h} ' BARYCENTRIC'],maskAtlasPaths{h},'-largest');
    fpp.wb.command('metric-math',[],'(atlas + indiv) > 0',maskPaths{h},...
        ['-var atlas ' maskAtlasPaths{h} ' -var indiv ' maskPaths{h}]);
    fpp.wb.command('metric-mask',thicknessPaths{h},maskPaths{h},thicknessPaths{h});
    fpp.wb.command('metric-mask',curvPaths{h},maskPaths{h},curvPaths{h});
    
    % Define medial wall ROI (1 - cortex), convert to label
    parcPaths{h}{end+1} = fpp.bids.changeName(maskPaths{h},'desc','medialwall','dseg','.label.gii');
    fpp.wb.command('metric-math',[],'1 - var',fpp.bids.changeName(maskPaths{h},'desc','medialwall'),...
        ['-var var ' maskPaths{h}]);
    fpp.wb.command('metric-label-import',fpp.bids.changeName(maskPaths{h},'desc','medialwall'),...
        [anatPreprocDir '/desc-medialwall_lut.txt'],parcPaths{h}{end});
    parcPaths{h}{end+1} = fpp.bids.changeName(maskAtlasPaths{h},'desc','medialwallAtlas','dseg','.label.gii');
    fpp.wb.command('metric-math',[],'1 - var',fpp.bids.changeName(maskAtlasPaths{h},'desc','medialwallAtlas'),...
        ['-var var ' maskAtlasPaths{h}]);
    fpp.wb.command('metric-label-import',fpp.bids.changeName(maskAtlasPaths{h},'desc','medialwallAtlas'),...
        [anatPreprocDir '/desc-medialwall_lut.txt'],parcPaths{h}{end});
    
    % Define atlas ROI in fsLR space
    maskAtlasFSLRPaths{h} = [anatPreprocDir '/hemi-' Hemis{h} '_space-fsLR_den-32k_desc-cortexAtlas_mask.shape.gii'];
    parcFSLRPaths{h}{1} = fpp.bids.changeName(maskAtlasFSLRPaths{h},'desc','medialwallAtlas','dseg','.label.gii');
    fpp.wb.command('metric-math',[],'1 - var',fpp.bids.changeName(maskAtlasFSLRPaths{h},'desc','medialwallAtlas'),...
        ['-var var ' maskAtlasFSLRPaths{h}]);
    fpp.wb.command('metric-label-import',fpp.bids.changeName(maskAtlasFSLRPaths{h},'desc','medialwallAtlas'),...
        [anatPreprocDir '/desc-medialwall_lut.txt'],parcFSLRPaths{h}{end});
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 9: Resample to fsLR
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 9, Resample to fsLR                       - ' subjID]);
surfaces = {'white','pial','midthickness'};
parcs = {'aparc','aparc09','medialwall'};
for h=1:2
    % Resample individual-space surfaces to fsLR coordinates
    for s=1:length(surfaces)
        inputPath = fpp.bids.changeName(midthickPaths{h},'','',surfaces{s});
        outputPath = fpp.bids.changeName(inputPath,'den','32k');
        fpp.wb.command('surface-resample',inputPath,[sphereRegFsLRPaths{h} ' '...
            fsLRSpherePaths{h}{1} ' BARYCENTRIC'],outputPath);
        fpp.bids.jsonChangeValue(outputPath,'SpatialRef',fpp.bids.removeBidsDir(...
            fpp.bids.changeName(midthickPaths{h},'den','32k')));
        eval([strrep(surfaces{s},'ness','') 'FsLRPaths{h} = outputPath;']);
    end
    % Generate inflated surface
    fsLRInflationScale = .75;
    fpp.wb.command('surface-generate-inflated',midthickFsLRPaths{h},fpp.bids.changeName(midthickFsLRPaths{h},[],[],'inflated'),...
        fpp.bids.changeName(midthickFsLRPaths{h},[],[],'vinflated'),['-iterations-scale ' num2str(fsLRInflationScale)]);
    % Resample shape files
    for s=1:length(shapes)
        inputPath = fpp.bids.changeName(sulcPaths{h},'','',shapes{s});
        outputPath = fpp.bids.changeName(inputPath,{'space','den'},{'fsLR','32k'});
        fpp.wb.command('metric-resample',inputPath,[sphereRegFsLRPaths{h} ' ' fsLRSpherePaths{h}{1}...
            ' ADAP_BARY_AREA'],outputPath,['-area-surfs ' midthickPaths{h} ' ' midthickFsLRPaths{h}...
            ' -current-roi ' maskPaths{h}]);
        fpp.wb.command('metric-mask',outputPath,[anatPreprocDir '/hemi-' Hemis{h} ...
            '_space-fsLR_den-32k_desc-cortexAtlas_mask.shape.gii'],outputPath);
    end
    outputPath = fpp.bids.changeName(arealDistortionPaths{h},{'space','den'},{'fsLR','32k'});
    fpp.wb.command('metric-resample',arealDistortionPaths{h},[sphereRegFsLRPaths{h} ' ' fsLRSpherePaths{h}{1}...
        ' ADAP_BARY_AREA'],outputPath,['-area-surfs ' midthickPaths{h} ' ' midthickFsLRPaths{h}]);
    outputPath = fpp.bids.changeName(edgeDistortionPaths{h},{'space','den'},{'fsLR','32k'});
    fpp.wb.command('metric-resample',edgeDistortionPaths{h},[sphereRegFsLRPaths{h} ' ' fsLRSpherePaths{h}{1}...
        ' ADAP_BARY_AREA'],outputPath,['-area-surfs ' midthickPaths{h} ' ' midthickFsLRPaths{h}]);
    outputPath = fpp.bids.changeName(maskPaths{h},{'space','den'},{'fsLR','32k'});
    fpp.wb.command('metric-resample',maskPaths{h},[sphereRegFsLRPaths{h} ' ' fsLRSpherePaths{h}{1}...
        ' ADAP_BARY_AREA'],outputPath,['-area-surfs ' midthickPaths{h} ' ' midthickFsLRPaths{h}]);
    % Resample label files
    for p=1:length(parcs)
        outputPath = fpp.bids.changeName(parcPaths{h}{p},{'space','den'},{'fsLR','32k'});
        fpp.wb.command('label-resample',parcPaths{h}{p},[sphereRegFsLRPaths{h} ' '...
            fsLRSpherePaths{h}{1} ' BARYCENTRIC'],outputPath,'-largest');
    end
    % Generate midthickness vertex area map
    outputPath = fpp.bids.changeName(midthickFsLRPaths{h},{'space','desc'},{'fsLR','midthickness'},'varea','.shape.gii');
    fpp.wb.command('surface-vertex-areas',midthickFsLRPaths{h},[],outputPath);
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 10: Generate CIFTI metric/label files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 10, Generate CIFTI metric/label files     - ' subjID]);
spaces = {'individual','fsLR'};
densities = {'native','32k'};
metrics = {'sulc','thickness','curv','distortion','distortion','mask'};    % Metric files to convert to CIFTI
mapNames = {'Sulc','Thickness','Curvature','ArealDistortionMSMSulc','EdgeDistortionMSMSulc','ROI'};
parcs = {'aparc','aparc09','medialwall','medialwallAtlas'};
roiSubjIDs = {subjID,[]};
descs = {'','','','reg2fsLRareal','reg2fsLRedge','cortex'};
paletteStrings = {'-pos-percent 2 98 -palette-name Gray_Interp -disp-pos true -disp-neg true -disp-zero true',...
    '-pos-percent 4 96 -interpolate true -palette-name videen_style -disp-pos true -disp-neg false -disp-zero false',...
    '-pos-percent 2 98 -palette-name Gray_Interp -disp-pos true -disp-neg true -disp-zero true',...
    '-pos-user 0 1 -neg-user 0 -1 -interpolate true -palette-name ROY-BIG-BL -disp-pos true -disp-neg true -disp-zero false',...
    '-pos-user 0 1 -neg-user 0 -1 -interpolate true -palette-name ROY-BIG-BL -disp-pos true -disp-neg true -disp-zero false',...
    '-pos-user 0 1 -neg-user 0 -1 -interpolate false -palette-name Gray_Interp -disp-pos true -disp-neg false -disp-zero false'};
modes = {'MODE_AUTO_SCALE_PERCENTAGE','MODE_AUTO_SCALE_PERCENTAGE','MODE_AUTO_SCALE_PERCENTAGE',...
    'MODE_USER_SCALE','MODE_USER_SCALE','MODE_USER_SCALE'};
for s=1:length(spaces)
    maskPathL = fpp.bids.changeName(maskAtlasPaths{1},{'sub','space','den'},{roiSubjIDs{s},spaces{s},densities{s}});
    maskPathR = fpp.bids.changeName(maskPathL,'hemi','R');
    maskStrL = [' -roi-left ' maskPathL];
    maskStrR = [' -roi-right ' maskPathR];
    for m=1:length(metrics)
        inputPathL = fpp.bids.changeName(sulcPaths{1},{'space','den','desc'},...
            {spaces{s},densities{s},descs{m}},metrics{m});
        inputPathR = fpp.bids.changeName(inputPathL,'hemi','R');
        outputPath = fpp.bids.changeName(inputPathL,'hemi',[],metrics{m},'.dscalar.nii');
        fpp.wb.command('cifti-create-dense-scalar',[],[],outputPath,['-left-metric '...
            inputPathL maskStrL ' -right-metric ' inputPathR maskStrR]);
        fpp.wb.command('set-map-names',outputPath,[],[],['-map 1 ' subjID '_' mapNames{m}]);
        fpp.wb.command('cifti-palette',outputPath,modes{m},outputPath,paletteStrings{m});
    end
    for p=1:length(parcs)
        if strcmp(parcs{p},'medialwallAtlas') && strcmp(spaces{s},'fsLR')   % No subject label for medialwallAtlas file in fsLR space
            inputPathL = parcFSLRPaths{1}{1};
            inputPathR = parcFSLRPaths{2}{1};
        else
            inputPathL = fpp.bids.changeName(parcPaths{1}{p},{'space','den'},{spaces{s},densities{s}});
            inputPathR = fpp.bids.changeName(inputPathL,'hemi','R');
        end
        if sum(regexp(parcs{p},'medialwall'))>0, maskStrL = ''; maskStrR = ''; end   % Don't mask medial wall label
        outputPath = fpp.bids.changeName(inputPathL,'hemi',[],'dseg','.dlabel.nii');
        fpp.wb.command('cifti-create-label',[],[],outputPath,['-left-label '...
            inputPathL maskStrL ' -right-label ' inputPathR maskStrR]);
        fpp.wb.command('set-map-names',outputPath,[],[],['-map 1 ' subjID '_' parcs{p}]);
    end
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 10.5, Copy/resample HCP1200 atlas data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 10.5, Copy/resample HCP1200 atlas data    - ' subjID]);
hcpAtlasDir = [dataDir '/HCP_S1200_Atlas'];
if exist(hcpAtlasDir,'dir')
    hcpDirExists = 1;
    surfaces = {'white','pial','midthickness','inflated','vinflated','flat','sphere'};
    surfacesHCP = surfaces; surfacesHCP{5} = 'very_inflated';
    surfacesHCPSuffix = {'_MSMAll','_MSMAll','_MSMAll','_MSMAll','_MSMAll','',''};
    parcFiles = {'Q1-Q6_RelatedValidation210.CorticalAreas_dil_Final_Final_Areas_Group_Colors.32k_fs_LR.dlabel.nii',...
        'RSN-networks.32k_fs_LR.dlabel.nii','Gordon333.32k_fs_LR.dlabel.nii'};
    parcs = {'MMP','RSN','Gordon'};
    parcDescriptions = {'Multimodal parcellation from Glasser et al. 2016, "A multi-modal parcellation of human cerebral cortex"',...
        ['Resting-state network parcellation from Yeo et al. 2011, "The organization of the human cerebral cortex'...
        ' estimated by intrinsic funcitonal connectivity"'],['Resting-state network parcellation from Gordon et al.'...
        ' 2016, "Generation and evaluation of a cortical area parcellation from resting-state correlations"']};
    borderFiles = {'Q1-Q6_RelatedValidation210.L.CorticalAreas_dil_Final_Final_Areas_Group.32k_fs_LR.border',...
        'Q1-Q6_RelatedValidation210.R.CorticalAreas_dil_Final_Final_Areas_Group.32k_fs_LR.border'};
    templatePath = fpp.bids.changeName(sulcPaths{1},{'hemi','space','den'},...
        {[],'individual','native'},'sulc','.dscalar.nii'); % Registration template
    jsonData = struct();
    jsonData.SpatialRef = 'fsLR';
    jsonData.Density = densityJson;
    jsonDataVol = struct();
    jsonDataVol.SpatialRef = inputT1Path;
    for h=1:2                   % Surfaces
        for s=1:length(surfaces)
            outputPath = fpp.bids.changeName(midthickPaths{h},{'sub','space','den','desc'},...
                {[],'fsLR','32k','HCP1200Atlas'},surfaces{s});
            fpp.util.system(['cp ' hcpAtlasDir '/S1200.' Hemis{h} '.' surfacesHCP{s} surfacesHCPSuffix{s}...
                '.32k_fs_LR.surf.gii ' outputPath]);
            bids.util.jsonencode(fpp.bids.jsonPath(outputPath),jsonData,jsonOpts);
        end
    end
    for s=1:length(shapes)      % Shape files
        outputPath=fpp.bids.changeName(sulcPaths{h},{'sub','hemi','space','den','desc'},...
             {[],[],'fsLR','32k','HCP1200Atlas'},shapes{s},'.dscalar.nii');
        outputPathNative=fpp.bids.changeName(outputPath,{'sub','space','den'},{subjID,'individual','native'});
        fpp.util.system(['cp ' hcpAtlasDir '/S1200.' lower(mapNames{s}) '_MSMAll.32k_fs_LR.dscalar.nii ' outputPath]);
        bids.util.jsonencode(fpp.bids.jsonPath(outputPath),jsonData,jsonOpts);
        fpp.wb.command('cifti-resample',outputPath,['COLUMN ' templatePath ' COLUMN ADAP_BARY_AREA TRILINEAR'],...
            outputPathNative,['-left-spheres ' fsLRSpherePaths{1}{1} ' ' sphereRegFsLRPaths{1} ' '...
            '-left-area-surfs ' fpp.bids.changeName(midthickPaths{1},{'sub','space','den','desc'},...
            {[],'fsLR','32k','HCP1200Atlas'}) ' ' midthickPaths{1} ' '...
            '-right-spheres ' fsLRSpherePaths{2}{1} ' ' sphereRegFsLRPaths{2} ' '...
            '-right-area-surfs ' fpp.bids.changeName(midthickPaths{2},{'sub','space','den','desc'},...
            {[],'fsLR','32k','HCP1200Atlas'}) ' ' midthickPaths{2}]);
        fpp.wb.command('cifti-math',[],'metric * mask',outputPathNative,['-var metric ' outputPathNative...
            ' -var mask ' fpp.bids.changeName(maskPaths{1},'hemi',[],[],'.dscalar.nii')]);  % Mask with cortex ROI
    end
    for p=1:length(parcs)   % Parcellations
        outputPath=fpp.bids.changeName(sulcPaths{h},{'sub','space','den','desc','hemi'},...
            {[],'fsLR','32k',parcs{p},''},'dseg','.dlabel.nii');
        outputPathNative=fpp.bids.changeName(outputPath,{'sub','space','den'},{subjID,'individual','native'});
        fpp.util.system(['cp ' hcpAtlasDir '/' parcFiles{p} ' ' outputPath]);
        jsonDataParc = jsonData;
        jsonDataParc.Description = parcDescriptions{p};
        bids.util.jsonencode(fpp.bids.jsonPath(outputPath),jsonDataParc,jsonOpts);
        fpp.wb.command('cifti-resample',outputPath,['COLUMN ' templatePath ' COLUMN BARYCENTRIC TRILINEAR'],...
            outputPathNative,['-left-spheres ' fsLRSpherePaths{1}{1} ' ' sphereRegFsLRPaths{1} ' '...
            '-right-spheres ' fsLRSpherePaths{2}{1} ' ' sphereRegFsLRPaths{2} ' -surface-largest']);
        % Convert parc to volume
        parcVolPath = fpp.bids.changeName(inputT1Path,'desc',parcs{p},'dseg','.nii.gz');
        %parcVolPath = fpp.bids.changeName(outputPath,{'sub','space','den'},{subjID,'individual',[]},[],'.nii.gz');
        parcLUTPath = [anatPreprocDir '/desc-' parcs{p} '_lut.txt'];
        for h=1:2
            parcSurfPaths{h} = fpp.bids.changeName(outputPath,'hemi',Hemis{h},[],'.label.gii');
            parcVolPaths{h} = fpp.bids.changeName(outputPath,{'hemi','den'},{Hemis{h},''},[],'.nii.gz');
        end
        fpp.wb.command('cifti-separate',outputPath,'COLUMN',[],['-label CORTEX_LEFT '...
            parcSurfPaths{1} ' -label CORTEX_RIGHT ' parcSurfPaths{2}]);
       for h=1:2
           fpp.wb.command('label-to-volume-mapping',parcSurfPaths{h},[fpp.bids.changeName(midthickPaths{h},{'space','den'},...
               {'individual','32k'}) ' ' inputT1Path],parcVolPaths{h},['-ribbon-constrained '...
               fpp.bids.changeName(midthickPaths{h},{'space','den'},{'individual','32k'},'white') ' '...
               fpp.bids.changeName(midthickPaths{h},{'space','den'},{'individual','32k'},'pial')]);
       end
       fpp.fsl.maths(parcVolPaths{1},['-add ' parcVolPaths{2}],parcVolPath);
       fpp.wb.command('cifti-label-export-table',outputPath,'1',parcLUTPath);
       fpp.wb.command('volume-label-import',parcVolPath,parcLUTPath,parcVolPath,'-drop-unused-labels');
       jsonDataVolParc = jsonDataVol;
       jsonDataVolParc.Description = parcDescriptions{p};
       bids.util.jsonencode(fpp.bids.jsonPath(parcVolPath),jsonDataParc,jsonOpts);
       for h=1:2
           fpp.util.system(['rm -rf ' parcSurfPaths{h} ' ' parcVolPaths{h}]);
           if exist(fpp.bids.jsonPath(parcSurfPaths{h}),'file')
               fpp.util.system(['rm -rf ' fpp.bids.jsonPath(parcSurfPaths{h})]);
           end
           if exist(fpp.bids.jsonPath(parcVolPaths{h}),'file')
               fpp.util.system(['rm -rf ' fpp.bids.jsonPath(parcVolPaths{h})]);
           end
       end
    end
    for h=1:2                   % Border files
        outputPath = fpp.bids.changeName(sulcPaths{h},{'sub','space','den','desc'},...
            {[],'fsLR','32k','MMP'},'dseg','.border');
        outputPathNative=fpp.bids.changeName(outputPath,{'sub','space','den'},{subjID,'individual','native'});
        fpp.util.system(['cp ' hcpAtlasDir '/' borderFiles{h} ' ' outputPath]);
        bids.util.jsonencode(fpp.bids.jsonPath(outputPath),jsonData,jsonOpts);
        fpp.wb.command('border-resample',outputPath,[fsLRSpherePaths{h}{1} ' ' sphereRegFsLRPaths{h}],outputPathNative);
    end
    fpp.util.system(['cp ' hcpAtlasDir '/MMP_areas_tangential_32k_bothHems_inflated.wb_annot '...
        anatPreprocDir '/space-fsLR_den-32k_desc-MMPAreas_inflated.wb_annot']);
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 11: Generate spec files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 11, Generate spec files                   - ' subjID]);
volumeFiles = {inputT1Path,inputT1Path,standardPathFuncResBrain};     % Add MNI-registered anatomical volumes for third space
volumeFiles2 = {inputT2Path,inputT2Path,[]};
subcortSegFiles = {subcortSegIndivPath,subcortSegIndivPath,subcortSegMNIPath};
surfaceSpaces = {'individual','individual','fsLR'};
surfaceDensities = {'native','32k','32k'};
surfaceSubjIDs = {subjID,subjID,[]};
surfaceDescs = {[],[],'HCP1200Atlas'};
surfaces = {'white','pial','midthickness','inflated','vinflated'};
sphereSpaces = {'individual','fsLR','fsLR'};
sphereSubjIDs = {subjID,[],[]};
sphereDensities = {'native','32k','32k'};
metricSpaces = {'individual','fsLR','fsLR'};
metrics = {'sulc','thickness','curv','distortion','distortion','sulc','thickness','curv'};    % Metric files to add to specs
metricDescs = {'','','','reg2fsLRareal','reg2fsLRedge','HCP1200Atlas','HCP1200Atlas','HCP1200Atlas'};              % Metric descriptions
parcs = {'medialwall','medialwallAtlas','aparc','aparc09','MMP','RSN','Gordon'};
if ~hcpDirExists
    surfaceSpaces = surfaceSpaces(1:2); % Only use S1200 space if atlas files exist
    metrics = metrics(1:5);
    parcs = parcs(1:4);
end
for s=1:length(surfaceSpaces)
    specPath = fpp.bids.changeName(midthickPaths{1},{'hemi','space','den'},{[],surfaceSpaces{s},...
        surfaceDensities{s}},'brain','.spec');
    if overwrite && exist(specPath,'file'), fpp.util.system(['rm -rf ' specPath]); end
    % Add volumes
    if ~isempty(volumeFiles{s})
        fpp.wb.command('add-to-spec-file',specPath,'INVALID',volumeFiles{s});
    end
    if ~isempty(volumeFiles2{s})
        fpp.wb.command('add-to-spec-file',specPath,'INVALID',volumeFiles2{s});
    end
    if ~isempty(subcortSegFiles{s})
        fpp.wb.command('add-to-spec-file',specPath,'INVALID',subcortSegFiles{s});
    end
    % Add surfaces
    for h=1:2
        for i=1:length(surfaces)
            fpp.wb.command('add-to-spec-file',specPath,structures{h},fpp.bids.changeName(midthickPaths{h},...
                {'sub','space','den','desc'},{surfaceSubjIDs{s},surfaceSpaces{s},surfaceDensities{s},surfaceDescs{s}},surfaces{i}));
        end
        if strcmp(surfaceSpaces{s},'fsLR') &&  strcmp(surfaceDensities{s},'32k')    % Include flatmap in atlas space
            fpp.wb.command('add-to-spec-file',specPath,structures{h},fpp.bids.changeName(midthickPaths{h},...
                {'sub','space','den','desc'},{surfaceSubjIDs{s},surfaceSpaces{s},surfaceDensities{s},surfaceDescs{s}},'flat'));
        end
        % Add spheres
        fpp.wb.command('add-to-spec-file',specPath,structures{h},fpp.bids.changeName(midthickPaths{h},...
            {'sub','space','den'},{sphereSubjIDs{s},sphereSpaces{s},sphereDensities{s}},'sphere'));
        if strcmp(surfaceSpaces{s},'individual') &&  strcmp(surfaceDensities{s},'native')   % Registration sphere
            fpp.wb.command('add-to-spec-file',specPath,structures{h},fpp.bids.changeName(midthickPaths{h},...
                {'sub','space','den','desc'},{sphereSubjIDs{s},sphereSpaces{s},sphereDensities{s},'reg2fsLR'},'sphere'));
        end
    end
    % Add CIFTI metric files
    for i=1:length(metrics)
        subLabel = subjID;
        if strcmp(metricDescs{i},'HCP1200Atlas') && strcmp(metricSpaces{s},'fsLR'), subLabel = ''; end
        fpp.wb.command('add-to-spec-file',specPath,'INVALID',fpp.bids.changeName(sulcPaths{1},...
            {'sub','hemi','space','den','desc'},{subLabel,[],metricSpaces{s},surfaceDensities{s},...
            metricDescs{i}},metrics{i},'.dscalar.nii'));
    end
    % Add CIFTI label files
    for i=1:length(parcs)
        subLabel = subjID;
        if ismember(parcs{i},{'medialwallAtlas','MMP','RSN','Gordon'}) ...
                && strcmp(metricSpaces{s},'fsLR'), subLabel = ''; end
        fpp.wb.command('add-to-spec-file',specPath,'INVALID',fpp.bids.changeName(sulcPaths{1},...
            {'sub','hemi','space','den','desc'},{subLabel,[],metricSpaces{s},surfaceDensities{s},...
            parcs{i}},'dseg','.dlabel.nii'));
    end
    % Add border/annot files
    if hcpDirExists
        % Border
        for h=1:2
            if strcmp(surfaceDensities{s},'32k')
                subLabel = '';
            else
                subLabel = subjID;
            end
            fpp.wb.command('add-to-spec-file',specPath,'INVALID',fpp.bids.changeName(sulcPaths{h},...
                {'sub','space','den','desc'},{subLabel,metricSpaces{s},surfaceDensities{s},'MMP'},'dseg','.border'));
        end
        % Annot
        if strcmp(surfaceSpaces{s},'fsLR')
            fpp.wb.command('add-to-spec-file',specPath,'INVALID',[anatPreprocDir ...
                '/space-fsLR_den-32k_desc-MMPAreas_inflated.wb_annot']);
        end
    end
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STEP 12: Downsample to functional resolution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('%s\n',['Step 12, Downsample to functional resolution   - ' subjID]);
volumePaths = {inputT1Path,fpp.bids.changeName(inputT1Path,'desc','preprocBrain')};
nn = [0 0]; % Whether to use nearest neighbor interpolation
if ~isempty(inputT2Path)
    volumePaths = [volumePaths {inputT2Path,fpp.bids.changeName(inputT2Path,'desc','preprocBrain')}];
    nn = [nn 0 0];
end
parcs = {'wmparc','aparcaseg','aparc09aseg','subcortical','Gordon','MMP','RSN'};
for p=1:length(parcs)
    parcVolPath = fpp.bids.changeName(wmPath,'desc',parcs{p});
    if exist(parcVolPath,'file')
        volumePaths{end+1} = parcVolPath;
    end
    nn = [nn 1];
end
maskNames = {'brainFS','brainFSdil1','gm','csf','wm','gmcortical','gmsubcortical'};
for m=1:length(maskNames)
    maskVolPath = fpp.bids.changeName(maskPath,'desc',maskNames{m});
    if exist(maskVolPath,'file')
        volumePaths{end+1} = maskVolPath;
    end
    nn = [nn 1];
end
for v=1:length(volumePaths)
    inputPath = volumePaths{v};
    outputPath = fpp.bids.changeName(inputPath,'res',funcResolution);
    if sum(regexp(inputPath,'brainFSdil1'))>0
        outputPath = fpp.bids.changeName(outputPath,'desc','brain');
    end
    if nn(v)
        interpStr = 'nn';
    else
        interpStr = 'trilinear';
    end
    fpp.fsl.moveImage(inputPath,standardPathFuncResBrain,outputPath,...
        [dataDir '/eye.mat'],'interp',interpStr);
end
% Erode downsampled wm and csf masks by 1 voxel
maskNames = {'wm','csf'};
for m=1:length(maskNames)
    inputPath = fpp.bids.changeName(maskPath,{'desc','res'},{maskNames{m},funcResolution});
    outputPath = fpp.bids.changeName(inputPath,'desc',[maskNames{m} 'ero1']);
    fpp.fsl.maths(inputPath,'-ero',outputPath);
end

end